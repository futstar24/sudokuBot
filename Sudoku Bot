import copy
import time

start = time.time()

board = [[".",".",".",".",".",".",".","7","1"],[".","2",".","8",".",".",".",".","."],[".",".",".","4",".","3",".",".","."],["7",".",".",".","6",".",".","5","."],[".",".",".","2",".",".","3",".","."],["9",".",".",".",".",".",".",".","."],["6",".",".",".","7",".",".",".","."],[".","8",".",".",".",".","4",".","."],[".",".",".",".","5",".",".",".","."]]

rows = []
for row in board:
  rows.append(row)
cols = []
for i in range(9):
  col = []
  for row in rows:
    col.append(row[i])
  cols.append(col)
boxes = []
for startRow in range(0, 9, 3):
  for startCol in range(0, 9, 3):
    box = []
    for i in range(startRow, 3 + startRow):
      for j in range(startCol, 3 + startCol):
        box.append(rows[i][j])
    boxes.append(box)
guess = False
rowPath = []
colPath = []
boxPath = []
guessBoards = []
path = []
guessNumber = 0
wait = False

def printBoard(board):
  print("  - - -   - - -   - - -")
  j = 0
  for row in board:
    j += 1
    i = 0
    print("|", end=" ")
    for item in row:
      i += 1
      print(item, end=" ")
      if i % 3 == 0:
        print("|", end=" ")
    print("\n", end="")
    if j % 3 == 0:
      print("  - - -   - - -   - - -")

print("Board: ")
printBoard(board)

def backtrack():
  global board
  global rows
  global cols
  global boxes
  global path
  global rowPath
  global colPath
  global boxPath
  path.pop(-1)
  board = copy.deepcopy(path[-1])
  rowPath.pop(-1)
  rows = copy.deepcopy(rowPath[-1])
  colPath.pop(-1)
  cols = copy.deepcopy(colPath[-1])
  boxPath.pop(-1)
  boxes = copy.deepcopy(boxPath[-1])

def extendPath():
  global board
  global rows
  global cols
  global boxes
  global path
  global rowPath
  global colPath
  global boxPath
  path.append(copy.deepcopy(board))
  rowPath.append(copy.deepcopy(rows))
  colPath.append(copy.deepcopy(cols))
  boxPath.append(copy.deepcopy(boxes))

def placeNumber():
  global board
  global rows
  global cols
  global boxes
  global possibilities
  global incr
  board[i][j] = possibilities[incr][0]
  rows[i][j] = possibilities[incr][0]
  cols[j][i] = possibilities[incr][0]
  boxes[possibilities[incr][1]].append(possibilities[incr][0])
  incr += 1

def checkNum(minI,maxI,minJ,maxJ,box):
  global i
  global j
  global k
  global boxes
  if i > minI and i < maxI and j > minJ and j < maxJ and k not in boxes[box]:
    possibilities.append([k, box])
  
while True:
  done = True
  for i in range(len(board)):
    for j in board[i]:
      if j == ".":
        done = False
  if done:
    break
  madeChange = False
  for i in range(9):
    for j in range(9):
      if not wait:
        if board[i][j] == ".":
          possibilities = []
          for k in range(1, 10):
            k = str(k)
            if k not in rows[i] and k not in cols[j]:
              checkNum(-1,3,-1,3,0)
              checkNum(-1,3,2,6,1)
              checkNum(-1,3,5,9,2)
              checkNum(2,6,-1,3,3)
              checkNum(2,6,2,6,4)
              checkNum(2,6,5,9,5)
              checkNum(5,9,-1,3,6)
              checkNum(5,9,2,6,7)
              checkNum(5,9,5,9,8)
          if len(possibilities) == 0:
            #print("failed at:",i,j)
            if len(path) > 0:
              backtrack() 
          elif len(possibilities) == 1:
            place = possibilities[0]
            board[i][j] = place[0]
            rows[i][j] = place[0]
            cols[j][i] = place[0]
            boxes[place[1]].append(place[0])
            madeChange = True
            #print("number placed")
          elif len(possibilities) > 1 and guess == True:
            if guessNumber == 1:
              extendPath()
              guessNumber += 1
            #print("possibilities: ", end="")
            #for item in possibilities:
              #print(item[0], end=", ")
            #print()
            #print("guess location:", i, j)
            incr = 0
            placeNumber()
            while board in guessBoards and incr < len(possibilities):
              #print(possibilities[incr - 1][0], "already checked")
              boxes[possibilities[incr][1]].pop(-1)
              placeNumber()
              
            if board in guessBoards:
              backtrack()
              #print("no options")
              wait = True
              
            else:
              madeChange = True
              guess = False
              guessBoards.append(copy.deepcopy(board))
              extendPath()
              #print(possibilities[incr - 1][0], "was guessed")
  if not madeChange:
    #print("guessing...")
    guess = True
    guessNumber += 1
  wait = False
  
print("Solution:")
printBoard(board)

end = time.time()
print("Total Runtime:",(end - start))